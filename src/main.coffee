
#===========================================================================================================
# CREATION
#-----------------------------------------------------------------------------------------------------------
@new_container = ( contents ) ->
  #.........................................................................................................
  R =
    '~isa':       'TEX/container'
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_raw_container = ( contents ) ->
  #.........................................................................................................
  R =
    '~isa':       'TEX/raw-container'
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_loner = ( name ) ->
  @validate_command_name name
  #.........................................................................................................
  R =
    '~isa':       'TEX/loner'
    'name':       name
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_group = ( contents ) ->
  #.........................................................................................................
  R =
    '~isa':       'TEX/group'
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_command = ( name, contents ) ->
  @validate_command_name name
  #.........................................................................................................
  R =
    '~isa':       'TEX/command'
    'name':       name
    'options':    null
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_multicommand = ( name, arity, contents ) ->
  #.........................................................................................................
  @validate_command_name name
  NUMBER.validate_is_nonnegative_integer arity
  #.........................................................................................................
  R =
    '~isa':       'TEX/multi-command'
    'name':       name
    'arity':      arity
    'options':    null
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
@new_environment = ( name, contents ) ->
  @validate_command_name name
  #.........................................................................................................
  R =
    '~isa':       'TEX/environment'
    'name':       name
    'contents':   get_contents contents
  #.........................................................................................................
  return R

#-----------------------------------------------------------------------------------------------------------
get_contents = ( contents ) ->
  return if TYPES.isa_list contents then contents else ( if contents? then [ contents ] else [] )

#-----------------------------------------------------------------------------------------------------------
@make_loner_group   = ( name ) -> return ( P... ) => return @new_group ( @new_loner name ), P...
@make_environment   = ( name ) -> return ( P... ) => return @new_environment        name,   P...
@make_loner         = ( name ) -> return ( P... ) => return @new_loner              name,   P...
@make_command       = ( name ) -> return ( P... ) => return @new_command            name,   P...

#-----------------------------------------------------------------------------------------------------------
@make_multicommand = ( name, arity ) ->
  return ( P... ) =>
    return @new_multicommand name, arity, P...

#===========================================================================================================
# VALIDATION
#-----------------------------------------------------------------------------------------------------------
@validate_command_name = ( x ) ->
  TYPES.validate_isa_text x
  unless ( x.match /^[a-zA-Z]+\*?$/ )?
    bye "command names must only contain upper- and lowercase English letters; got #{rpr x}"

#-----------------------------------------------------------------------------------------------------------
@validate_option_name = ( x ) ->
  TEXT.validate_is_nonempty_text x
  if ( x.match /\\|\{|\}|&|\$|\#|%|_|\^|~/ )?
    bye "option names must not contain special characters; got #{rpr x}"

#-----------------------------------------------------------------------------------------------------------
@validate_isa_command = ( x ) ->
  bye "expected a TEX/command, got a #{type}" unless ( type = TYPES.type_of x ) is 'TEX/command'


#===========================================================================================================
# MANIPULATION
#-----------------------------------------------------------------------------------------------------------
@push = ( me, content ) ->
  me[ 'contents' ].push content
  return me

#-----------------------------------------------------------------------------------------------------------
@append = ( me, content ) ->
  me[ 'contents' ].push ' '
  me[ 'contents' ].push content
  return me

# #-----------------------------------------------------------------------------------------------------------
# @break = ( me ) ->
#   me[ 'contents' ].push '\n\n'
#   return me

#-----------------------------------------------------------------------------------------------------------
@add = ( me, you ) ->
  LIST.add me[ 'contents' ], you
  return me

#-----------------------------------------------------------------------------------------------------------
@length_of = ( me ) ->
  return me[ 'contents' ].length

#-----------------------------------------------------------------------------------------------------------
@is_empty = ( me ) ->
  return ( @length_of me ) is 0

#-----------------------------------------------------------------------------------------------------------
@intersperse = ( me, x ) ->
  LIST.intersperse me[ 'contents' ], x
  return me

#-----------------------------------------------------------------------------------------------------------
@set = ( me, name, value = null ) ->
  @validate_isa_command me
  options = me[ 'options' ]?= {}
  @_set options, name, value
  return me

#...........................................................................................................
@set_options = ( me, options... ) ->
  @validate_isa_command me
  _options = me[ 'options' ]?= {}
  #.........................................................................................................
  for part in options
    #.......................................................................................................
    if TYPES.isa_text part
      @_set _options, part, null
    #.......................................................................................................
    # ###TAINT### should perform stricter type checking
    else
      @_set _options, name, value for name, value of part
  #.........................................................................................................
  return null

#...........................................................................................................
@_set = ( options, name, value ) ->
  @validate_option_name name
  options[ name ] = value
  return null


#===========================================================================================================
# SERIALIZATION
#-----------------------------------------------------------------------------------------------------------
@_escape_replacements = [
  [ ///  \\  ///g,  '\\textbackslash{}',    ]
  [ ///  \{  ///g,  '\\{',                  ]
  [ ///  \}  ///g,  '\\}',                  ]
  [ ///  &   ///g,  '\\&',                  ]
  [ ///  \$  ///g,  '\\$',                  ]
  [ ///  \#  ///g,  '\\#',                  ]
  [ ///  %   ///g,  '\\%',                  ]
  [ ///  _   ///g,  '\\_',                  ]
  [ ///  \^  ///g,  '\\textasciicircum{}',  ]
  [ ///  ~   ///g,  '\\textasciitilde{}',   ]
  # '`'   # these two are very hard to catch when TeX's character handling is switched on
  # "'"   #
  ]

#-----------------------------------------------------------------------------------------------------------
@_escape = ( text ) ->
  R = text
  for [ matcher, replacement, ] in @_escape_replacements
    R = R.replace matcher, replacement
  return R

#-----------------------------------------------------------------------------------------------------------
@rpr = ( x ) ->
  return switch TYPES.type_of x
    when 'text'               then @_escape               x
    when 'TEX/container'      then @_rpr_of_container     x
    when 'TEX/raw-container'  then @_rpr_of_raw_container x
    when 'TEX/loner'          then @_rpr_of_loner         x
    when 'TEX/group'          then @_rpr_of_group         x
    when 'TEX/command'        then @_rpr_of_command       x
    when 'TEX/multi-command'  then @_rpr_of_multicommand  x
    when 'TEX/environment'    then @_rpr_of_environment   x
    else                           rpr                    x

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_container = ( me ) ->
  return ( @rpr content for content in me[ 'contents' ] ).join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_raw_container = ( me ) ->
  return me[ 'contents' ].join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_loner = ( me ) ->
  return '\\' + me[ 'name' ] + '{}'

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_group = ( me ) ->
  R = [ '{', ]
  R.push @rpr content for content in me[ 'contents' ]
  R.push '}'
  return R.join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_command = ( me ) ->
  R = [ '\\', me[ 'name' ], ]
  R.push @_rpr_of_options me
  #.........................................................................................................
  R.push '{'
  R.push @rpr content for content in me[ 'contents' ]
  R.push '}'
  #.........................................................................................................
  return R.join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_multicommand = ( me ) ->
  R = [ '\\', me[ 'name' ], ]
  R.push @_rpr_of_options me
  #.........................................................................................................
  content_count = me[ 'contents' ].length
  arity         = me[ 'arity' ]
  if content_count != arity
    bye "command `\\#{me[ 'name' ]}` expects #{arity} arguments, got #{content_count}"
  R.push '{' + ( @rpr content ) + '}' for content in me[ 'contents' ]
  #.........................................................................................................
  return R.join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_environment = ( me ) ->
  R = [ '\\begin{', me[ 'name' ], '}\n', ]
  R.push @rpr content for content in me[ 'contents' ]
  R.push '\n\\end{'
  R.push me[ 'name' ]
  R.push '}\n'
  return R.join ''

#-----------------------------------------------------------------------------------------------------------
@_rpr_of_options = ( me ) ->
  #.........................................................................................................
  if ( options = me[ 'options' ] )?
    R.push '['
    _options = []
    for name, value of options
      _options.push if value? then "#{name}=#{value}" else name
    R.push _options.join ','
    R.push ']'
    return R.join ''
  #.........................................................................................................
  return ''

############################################################################################################
module.exports = bundle @

